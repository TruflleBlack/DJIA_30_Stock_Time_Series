# -*- coding: utf-8 -*-
"""DJIA_30_Stock_Time_Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_XldhIzt6hRemMqeK7lsP2R3EAUIiqQ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from keras.layers import Dense, LSTM, Dropout, Bidirectional 
from keras.models import Sequential
from tensorflow.keras.optimizers import SGD

data_train = pd.read_csv('data.csv',parse_dates=['Date'])
data_train.head()

data_train.tail()

dates = data_train['Date'].values
high = data_train['High'].values

plt.figure(figsize=(15,5))
plt.plot(dates, high)
plt.title('AABA High Value',fontsize=15)

print("MAE harus di bawah "+str(data_train['Open'].max()-data_train['Open'].min()))

def windowed_dataset(series, shuffle_buffer, window_size = 40, batch_size = 100):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

X_train, X_test, Y_train, Y_test = train_test_split(dates, high, test_size=0.2, shuffle=False)

train_set = windowed_dataset(Y_train, shuffle_buffer=1000)
val_set = windowed_dataset( Y_test, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(120, activation="relu"),
  tf.keras.layers.Dense(60, activation="relu"),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(1),
])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('mae')<10) and (logs.get('val_mae')<10):
      print('\nMAE kurang dari <10%!')
      self.model.stop_training = True

callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-03, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=100, validation_data=val_set, callbacks=callbacks)